// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gtfs-realtime.proto
package com.google.transit.realtime;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Identification information for the vehicle performing the trip.
 */
public final class VehicleDescriptor extends Message<VehicleDescriptor, VehicleDescriptor.Builder> {
  public static final ProtoAdapter<VehicleDescriptor> ADAPTER = new ProtoAdapter_VehicleDescriptor();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_LABEL = "";

  public static final String DEFAULT_LICENSE_PLATE = "";

  /**
   * Internal system identification of the vehicle. Should be unique per
   * vehicle, and can be used for tracking the vehicle as it proceeds through
   * the system.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * User visible label, i.e., something that must be shown to the passenger to
   * help identify the correct vehicle.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String label;

  /**
   * The license plate of the vehicle.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String license_plate;

  public VehicleDescriptor(String id, String label, String license_plate) {
    this(id, label, license_plate, ByteString.EMPTY);
  }

  public VehicleDescriptor(String id, String label, String license_plate,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.label = label;
    this.license_plate = license_plate;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.label = label;
    builder.license_plate = license_plate;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VehicleDescriptor)) return false;
    VehicleDescriptor o = (VehicleDescriptor) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(label, o.label)
        && Internal.equals(license_plate, o.license_plate);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (label != null ? label.hashCode() : 0);
      result = result * 37 + (license_plate != null ? license_plate.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (label != null) builder.append(", label=").append(label);
    if (license_plate != null) builder.append(", license_plate=").append(license_plate);
    return builder.replace(0, 2, "VehicleDescriptor{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<VehicleDescriptor, Builder> {
    public String id;

    public String label;

    public String license_plate;

    public Builder() {
    }

    /**
     * Internal system identification of the vehicle. Should be unique per
     * vehicle, and can be used for tracking the vehicle as it proceeds through
     * the system.
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * User visible label, i.e., something that must be shown to the passenger to
     * help identify the correct vehicle.
     */
    public Builder label(String label) {
      this.label = label;
      return this;
    }

    /**
     * The license plate of the vehicle.
     */
    public Builder license_plate(String license_plate) {
      this.license_plate = license_plate;
      return this;
    }

    @Override
    public VehicleDescriptor build() {
      return new VehicleDescriptor(id, label, license_plate, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VehicleDescriptor extends ProtoAdapter<VehicleDescriptor> {
    public ProtoAdapter_VehicleDescriptor() {
      super(FieldEncoding.LENGTH_DELIMITED, VehicleDescriptor.class);
    }

    @Override
    public int encodedSize(VehicleDescriptor value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.label)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.license_plate)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VehicleDescriptor value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.label);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.license_plate);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VehicleDescriptor decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.label(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.license_plate(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VehicleDescriptor redact(VehicleDescriptor value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
