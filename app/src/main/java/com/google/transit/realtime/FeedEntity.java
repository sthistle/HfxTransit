// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gtfs-realtime.proto
package com.google.transit.realtime;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A definition (or update) of an entity in the transit feed.
 */
public final class FeedEntity extends Message<FeedEntity, FeedEntity.Builder> {
  public static final ProtoAdapter<FeedEntity> ADAPTER = new ProtoAdapter_FeedEntity();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final Boolean DEFAULT_IS_DELETED = false;

  /**
   * The ids are used only to provide incrementality support. The id should be
   * unique within a FeedMessage. Consequent FeedMessages may contain
   * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
   * FeedEntity with some id will replace the old FeedEntity with the same id
   * (or delete it - see is_deleted below).
   * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
   * feed must be specified by explicit selectors (see EntitySelector below for
   * more info).
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String id;

  /**
   * Whether this entity is to be deleted. Relevant only for incremental
   * fetches.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean is_deleted;

  /**
   * Data about the entity itself. Exactly one of the following fields must be
   * present (unless the entity is being deleted).
   */
  @WireField(
      tag = 3,
      adapter = "com.google.transit.realtime.TripUpdate#ADAPTER"
  )
  public final TripUpdate trip_update;

  @WireField(
      tag = 4,
      adapter = "com.google.transit.realtime.VehiclePosition#ADAPTER"
  )
  public final VehiclePosition vehicle;

  @WireField(
      tag = 5,
      adapter = "com.google.transit.realtime.Alert#ADAPTER"
  )
  public final Alert alert;

  public FeedEntity(String id, Boolean is_deleted, TripUpdate trip_update, VehiclePosition vehicle,
      Alert alert) {
    this(id, is_deleted, trip_update, vehicle, alert, ByteString.EMPTY);
  }

  public FeedEntity(String id, Boolean is_deleted, TripUpdate trip_update, VehiclePosition vehicle,
      Alert alert, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.is_deleted = is_deleted;
    this.trip_update = trip_update;
    this.vehicle = vehicle;
    this.alert = alert;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.is_deleted = is_deleted;
    builder.trip_update = trip_update;
    builder.vehicle = vehicle;
    builder.alert = alert;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FeedEntity)) return false;
    FeedEntity o = (FeedEntity) other;
    return unknownFields().equals(o.unknownFields())
        && id.equals(o.id)
        && Internal.equals(is_deleted, o.is_deleted)
        && Internal.equals(trip_update, o.trip_update)
        && Internal.equals(vehicle, o.vehicle)
        && Internal.equals(alert, o.alert);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + id.hashCode();
      result = result * 37 + (is_deleted != null ? is_deleted.hashCode() : 0);
      result = result * 37 + (trip_update != null ? trip_update.hashCode() : 0);
      result = result * 37 + (vehicle != null ? vehicle.hashCode() : 0);
      result = result * 37 + (alert != null ? alert.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", id=").append(id);
    if (is_deleted != null) builder.append(", is_deleted=").append(is_deleted);
    if (trip_update != null) builder.append(", trip_update=").append(trip_update);
    if (vehicle != null) builder.append(", vehicle=").append(vehicle);
    if (alert != null) builder.append(", alert=").append(alert);
    return builder.replace(0, 2, "FeedEntity{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<FeedEntity, Builder> {
    public String id;

    public Boolean is_deleted;

    public TripUpdate trip_update;

    public VehiclePosition vehicle;

    public Alert alert;

    public Builder() {
    }

    /**
     * The ids are used only to provide incrementality support. The id should be
     * unique within a FeedMessage. Consequent FeedMessages may contain
     * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
     * FeedEntity with some id will replace the old FeedEntity with the same id
     * (or delete it - see is_deleted below).
     * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
     * feed must be specified by explicit selectors (see EntitySelector below for
     * more info).
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * Whether this entity is to be deleted. Relevant only for incremental
     * fetches.
     */
    public Builder is_deleted(Boolean is_deleted) {
      this.is_deleted = is_deleted;
      return this;
    }

    /**
     * Data about the entity itself. Exactly one of the following fields must be
     * present (unless the entity is being deleted).
     */
    public Builder trip_update(TripUpdate trip_update) {
      this.trip_update = trip_update;
      return this;
    }

    public Builder vehicle(VehiclePosition vehicle) {
      this.vehicle = vehicle;
      return this;
    }

    public Builder alert(Alert alert) {
      this.alert = alert;
      return this;
    }

    @Override
    public FeedEntity build() {
      if (id == null) {
        throw Internal.missingRequiredFields(id, "id");
      }
      return new FeedEntity(id, is_deleted, trip_update, vehicle, alert, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FeedEntity extends ProtoAdapter<FeedEntity> {
    public ProtoAdapter_FeedEntity() {
      super(FieldEncoding.LENGTH_DELIMITED, FeedEntity.class);
    }

    @Override
    public int encodedSize(FeedEntity value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.BOOL.encodedSizeWithTag(2, value.is_deleted)
          + TripUpdate.ADAPTER.encodedSizeWithTag(3, value.trip_update)
          + VehiclePosition.ADAPTER.encodedSizeWithTag(4, value.vehicle)
          + Alert.ADAPTER.encodedSizeWithTag(5, value.alert)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FeedEntity value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.is_deleted);
      TripUpdate.ADAPTER.encodeWithTag(writer, 3, value.trip_update);
      VehiclePosition.ADAPTER.encodeWithTag(writer, 4, value.vehicle);
      Alert.ADAPTER.encodeWithTag(writer, 5, value.alert);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FeedEntity decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.is_deleted(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.trip_update(TripUpdate.ADAPTER.decode(reader)); break;
          case 4: builder.vehicle(VehiclePosition.ADAPTER.decode(reader)); break;
          case 5: builder.alert(Alert.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FeedEntity redact(FeedEntity value) {
      Builder builder = value.newBuilder();
      if (builder.trip_update != null) builder.trip_update = TripUpdate.ADAPTER.redact(builder.trip_update);
      if (builder.vehicle != null) builder.vehicle = VehiclePosition.ADAPTER.redact(builder.vehicle);
      if (builder.alert != null) builder.alert = Alert.ADAPTER.redact(builder.alert);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
