// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gtfs-realtime.proto
package com.google.transit.realtime;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A selector for an entity in a GTFS feed.
 */
public final class EntitySelector extends Message<EntitySelector, EntitySelector.Builder> {
  public static final ProtoAdapter<EntitySelector> ADAPTER = new ProtoAdapter_EntitySelector();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_AGENCY_ID = "";

  public static final String DEFAULT_ROUTE_ID = "";

  public static final Integer DEFAULT_ROUTE_TYPE = 0;

  public static final String DEFAULT_STOP_ID = "";

  /**
   * The values of the fields should correspond to the appropriate fields in the
   * GTFS feed.
   * At least one specifier must be given. If several are given, then the
   * matching has to apply to all the given specifiers.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String agency_id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String route_id;

  /**
   * corresponds to route_type in GTFS.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer route_type;

  @WireField(
      tag = 4,
      adapter = "com.google.transit.realtime.TripDescriptor#ADAPTER"
  )
  public final TripDescriptor trip;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String stop_id;

  public EntitySelector(String agency_id, String route_id, Integer route_type, TripDescriptor trip,
      String stop_id) {
    this(agency_id, route_id, route_type, trip, stop_id, ByteString.EMPTY);
  }

  public EntitySelector(String agency_id, String route_id, Integer route_type, TripDescriptor trip,
      String stop_id, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.agency_id = agency_id;
    this.route_id = route_id;
    this.route_type = route_type;
    this.trip = trip;
    this.stop_id = stop_id;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.agency_id = agency_id;
    builder.route_id = route_id;
    builder.route_type = route_type;
    builder.trip = trip;
    builder.stop_id = stop_id;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof EntitySelector)) return false;
    EntitySelector o = (EntitySelector) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(agency_id, o.agency_id)
        && Internal.equals(route_id, o.route_id)
        && Internal.equals(route_type, o.route_type)
        && Internal.equals(trip, o.trip)
        && Internal.equals(stop_id, o.stop_id);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (agency_id != null ? agency_id.hashCode() : 0);
      result = result * 37 + (route_id != null ? route_id.hashCode() : 0);
      result = result * 37 + (route_type != null ? route_type.hashCode() : 0);
      result = result * 37 + (trip != null ? trip.hashCode() : 0);
      result = result * 37 + (stop_id != null ? stop_id.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (agency_id != null) builder.append(", agency_id=").append(agency_id);
    if (route_id != null) builder.append(", route_id=").append(route_id);
    if (route_type != null) builder.append(", route_type=").append(route_type);
    if (trip != null) builder.append(", trip=").append(trip);
    if (stop_id != null) builder.append(", stop_id=").append(stop_id);
    return builder.replace(0, 2, "EntitySelector{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<EntitySelector, Builder> {
    public String agency_id;

    public String route_id;

    public Integer route_type;

    public TripDescriptor trip;

    public String stop_id;

    public Builder() {
    }

    /**
     * The values of the fields should correspond to the appropriate fields in the
     * GTFS feed.
     * At least one specifier must be given. If several are given, then the
     * matching has to apply to all the given specifiers.
     */
    public Builder agency_id(String agency_id) {
      this.agency_id = agency_id;
      return this;
    }

    public Builder route_id(String route_id) {
      this.route_id = route_id;
      return this;
    }

    /**
     * corresponds to route_type in GTFS.
     */
    public Builder route_type(Integer route_type) {
      this.route_type = route_type;
      return this;
    }

    public Builder trip(TripDescriptor trip) {
      this.trip = trip;
      return this;
    }

    public Builder stop_id(String stop_id) {
      this.stop_id = stop_id;
      return this;
    }

    @Override
    public EntitySelector build() {
      return new EntitySelector(agency_id, route_id, route_type, trip, stop_id, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_EntitySelector extends ProtoAdapter<EntitySelector> {
    public ProtoAdapter_EntitySelector() {
      super(FieldEncoding.LENGTH_DELIMITED, EntitySelector.class);
    }

    @Override
    public int encodedSize(EntitySelector value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.agency_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.route_id)
          + ProtoAdapter.INT32.encodedSizeWithTag(3, value.route_type)
          + TripDescriptor.ADAPTER.encodedSizeWithTag(4, value.trip)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.stop_id)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, EntitySelector value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.agency_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.route_id);
      ProtoAdapter.INT32.encodeWithTag(writer, 3, value.route_type);
      TripDescriptor.ADAPTER.encodeWithTag(writer, 4, value.trip);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.stop_id);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public EntitySelector decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.agency_id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.route_id(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.route_type(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.trip(TripDescriptor.ADAPTER.decode(reader)); break;
          case 5: builder.stop_id(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public EntitySelector redact(EntitySelector value) {
      Builder builder = value.newBuilder();
      if (builder.trip != null) builder.trip = TripDescriptor.ADAPTER.redact(builder.trip);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
