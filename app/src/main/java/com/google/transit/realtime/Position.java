// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gtfs-realtime.proto
package com.google.transit.realtime;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Float;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A position.
 */
public final class Position extends Message<Position, Position.Builder> {
  public static final ProtoAdapter<Position> ADAPTER = new ProtoAdapter_Position();

  private static final long serialVersionUID = 0L;

  public static final Float DEFAULT_LATITUDE = 0.0f;

  public static final Float DEFAULT_LONGITUDE = 0.0f;

  public static final Float DEFAULT_BEARING = 0.0f;

  public static final Double DEFAULT_ODOMETER = 0.0d;

  public static final Float DEFAULT_SPEED = 0.0f;

  /**
   * Degrees North, in the WGS-84 coordinate system.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.REQUIRED
  )
  public final Float latitude;

  /**
   * Degrees East, in the WGS-84 coordinate system.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT",
      label = WireField.Label.REQUIRED
  )
  public final Float longitude;

  /**
   * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
   * This can be the compass bearing, or the direction towards the next stop
   * or intermediate location.
   * This should not be direction deduced from the sequence of previous
   * positions, which can be computed from previous data.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float bearing;

  /**
   * Odometer value, in meters.
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double odometer;

  /**
   * Momentary speed measured by the vehicle, in meters per second.
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#FLOAT"
  )
  public final Float speed;

  public Position(Float latitude, Float longitude, Float bearing, Double odometer, Float speed) {
    this(latitude, longitude, bearing, odometer, speed, ByteString.EMPTY);
  }

  public Position(Float latitude, Float longitude, Float bearing, Double odometer, Float speed,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.latitude = latitude;
    this.longitude = longitude;
    this.bearing = bearing;
    this.odometer = odometer;
    this.speed = speed;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.latitude = latitude;
    builder.longitude = longitude;
    builder.bearing = bearing;
    builder.odometer = odometer;
    builder.speed = speed;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Position)) return false;
    Position o = (Position) other;
    return unknownFields().equals(o.unknownFields())
        && latitude.equals(o.latitude)
        && longitude.equals(o.longitude)
        && Internal.equals(bearing, o.bearing)
        && Internal.equals(odometer, o.odometer)
        && Internal.equals(speed, o.speed);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + latitude.hashCode();
      result = result * 37 + longitude.hashCode();
      result = result * 37 + (bearing != null ? bearing.hashCode() : 0);
      result = result * 37 + (odometer != null ? odometer.hashCode() : 0);
      result = result * 37 + (speed != null ? speed.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", latitude=").append(latitude);
    builder.append(", longitude=").append(longitude);
    if (bearing != null) builder.append(", bearing=").append(bearing);
    if (odometer != null) builder.append(", odometer=").append(odometer);
    if (speed != null) builder.append(", speed=").append(speed);
    return builder.replace(0, 2, "Position{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Position, Builder> {
    public Float latitude;

    public Float longitude;

    public Float bearing;

    public Double odometer;

    public Float speed;

    public Builder() {
    }

    /**
     * Degrees North, in the WGS-84 coordinate system.
     */
    public Builder latitude(Float latitude) {
      this.latitude = latitude;
      return this;
    }

    /**
     * Degrees East, in the WGS-84 coordinate system.
     */
    public Builder longitude(Float longitude) {
      this.longitude = longitude;
      return this;
    }

    /**
     * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
     * This can be the compass bearing, or the direction towards the next stop
     * or intermediate location.
     * This should not be direction deduced from the sequence of previous
     * positions, which can be computed from previous data.
     */
    public Builder bearing(Float bearing) {
      this.bearing = bearing;
      return this;
    }

    /**
     * Odometer value, in meters.
     */
    public Builder odometer(Double odometer) {
      this.odometer = odometer;
      return this;
    }

    /**
     * Momentary speed measured by the vehicle, in meters per second.
     */
    public Builder speed(Float speed) {
      this.speed = speed;
      return this;
    }

    @Override
    public Position build() {
      if (latitude == null
          || longitude == null) {
        throw Internal.missingRequiredFields(latitude, "latitude",
            longitude, "longitude");
      }
      return new Position(latitude, longitude, bearing, odometer, speed, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Position extends ProtoAdapter<Position> {
    public ProtoAdapter_Position() {
      super(FieldEncoding.LENGTH_DELIMITED, Position.class);
    }

    @Override
    public int encodedSize(Position value) {
      return ProtoAdapter.FLOAT.encodedSizeWithTag(1, value.latitude)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(2, value.longitude)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(3, value.bearing)
          + ProtoAdapter.DOUBLE.encodedSizeWithTag(4, value.odometer)
          + ProtoAdapter.FLOAT.encodedSizeWithTag(5, value.speed)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Position value) throws IOException {
      ProtoAdapter.FLOAT.encodeWithTag(writer, 1, value.latitude);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 2, value.longitude);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 3, value.bearing);
      ProtoAdapter.DOUBLE.encodeWithTag(writer, 4, value.odometer);
      ProtoAdapter.FLOAT.encodeWithTag(writer, 5, value.speed);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Position decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.latitude(ProtoAdapter.FLOAT.decode(reader)); break;
          case 2: builder.longitude(ProtoAdapter.FLOAT.decode(reader)); break;
          case 3: builder.bearing(ProtoAdapter.FLOAT.decode(reader)); break;
          case 4: builder.odometer(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 5: builder.speed(ProtoAdapter.FLOAT.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Position redact(Position value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
