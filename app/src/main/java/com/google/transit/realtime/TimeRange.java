// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: gtfs-realtime.proto
package com.google.transit.realtime;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 *
 * Low level data structures used above.
 *
 * A time interval. The interval is considered active at time 't' if 't' is
 * greater than or equal to the start time and less than the end time.
 */
public final class TimeRange extends Message<TimeRange, TimeRange.Builder> {
  public static final ProtoAdapter<TimeRange> ADAPTER = new ProtoAdapter_TimeRange();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_START = 0L;

  public static final Long DEFAULT_END = 0L;

  /**
   * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
   * 00:00:00 UTC).
   * If missing, the interval starts at minus infinity.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long start;

  /**
   * End time, in POSIX time (i.e., number of seconds since January 1st 1970
   * 00:00:00 UTC).
   * If missing, the interval ends at plus infinity.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long end;

  public TimeRange(Long start, Long end) {
    this(start, end, ByteString.EMPTY);
  }

  public TimeRange(Long start, Long end, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.start = start;
    this.end = end;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.start = start;
    builder.end = end;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TimeRange)) return false;
    TimeRange o = (TimeRange) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(start, o.start)
        && Internal.equals(end, o.end);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (start != null ? start.hashCode() : 0);
      result = result * 37 + (end != null ? end.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (start != null) builder.append(", start=").append(start);
    if (end != null) builder.append(", end=").append(end);
    return builder.replace(0, 2, "TimeRange{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<TimeRange, Builder> {
    public Long start;

    public Long end;

    public Builder() {
    }

    /**
     * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval starts at minus infinity.
     */
    public Builder start(Long start) {
      this.start = start;
      return this;
    }

    /**
     * End time, in POSIX time (i.e., number of seconds since January 1st 1970
     * 00:00:00 UTC).
     * If missing, the interval ends at plus infinity.
     */
    public Builder end(Long end) {
      this.end = end;
      return this;
    }

    @Override
    public TimeRange build() {
      return new TimeRange(start, end, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TimeRange extends ProtoAdapter<TimeRange> {
    public ProtoAdapter_TimeRange() {
      super(FieldEncoding.LENGTH_DELIMITED, TimeRange.class);
    }

    @Override
    public int encodedSize(TimeRange value) {
      return ProtoAdapter.UINT64.encodedSizeWithTag(1, value.start)
          + ProtoAdapter.UINT64.encodedSizeWithTag(2, value.end)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, TimeRange value) throws IOException {
      ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.start);
      ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.end);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public TimeRange decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.start(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.end(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public TimeRange redact(TimeRange value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
